{"version":3,"sources":["Astro.js","Earth.js","Moon.js","Orbit.js","Sun.js","TwoLineElement.js","WSG84.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtprnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"astrobasic-1.1.js","sourcesContent":["class Astro {\n\n    static get G() {\n        return 6.674E-11;\n    }\n\n    static rightAscension2hourAngle(α, time) {\n        let UT = α.toDec(),\n            GST = time.toGST();\n\n        console.log(GST);\n    }\n\n}","/**\n * Earth planetary class.\n *\n * @see http://nssdc.gsfc.nasa.gov/planetary/factsheet/earthfact.html\n */\nclass Earth extends WGS84 {\n\n    /**\n     * Volumetric mean radius\n     *\n     * @returns {Unit}\n     */\n    static get R() {\n        return math.unit(6371008, 'm');\n    }\n\n    /**\n     * Mass\n     *\n     * @returns {Unit}\n     */\n    static get M() {\n        return math.unit(5.97219E24, 'kg');\n    }\n\n    /**\n     * Astronomical Unit, Sun to Earth distance.\n     *\n     * @see http://neo.jpl.nasa.gov/glossary/au.html\n     * @returns {Unit}\n     */\n    static get AU() {\n        return math.unit(149597870700, 'm');\n    }\n\n    // J2000\n\n    static get e() {\n        return 0.01671;\n    }\n\n    static get i() {\n        return math.unit(0.000, 'deg');\n    }\n\n    static get ω() {\n        return math.unit(288.064, 'deg');\n    }\n\n    static get Ω() {\n        return math.unit(174.873, 'deg');\n    }\n\n    static get M0() {\n        return math.unit(357.529, 'deg');\n    }\n\n}","class Moon extends Orbit {\n\n    /**\n     * Mean longitude at the epoch 2010.0.\n     * @returns {Unit}\n     */\n    static get l0() {\n        return math.unit(91.929336, 'deg');\n    }\n\n    /**\n     * Mean longitude of the perigee at the epoch 2010.0.\n     * @returns {Unit}\n     */\n    static get P0() {\n        return math.unit(130.143076, 'deg');\n    }\n\n    /**\n     * Mean longitude of the node at the epoch 2010.0.\n     * @returns {Unit}\n     */\n    static get N0() {\n        return math.unit(291.682547, 'deg');\n    }\n\n    /**\n     * Moon’s angular diameter at distance a from the Earth at the epoch 2010.0\n     * @returns {Unit}\n     */\n    static get θ0() {\n        return math.unit(0.5181, 'deg');\n    }\n\n    /**\n     * Moon’s angular diameter at distance a from the Earth at the epoch 2010.0\n     * @returns {Unit}\n     */\n    static get π0() {\n        return math.unit(0.9507, 'deg');\n    }\n\n    /**\n     * Inclination of Moon’s orbit\n     * @returns {Unit}\n     */\n    static get i() {\n        return math.unit(5.145396, 'deg');\n    }\n\n    /**\n     * Eccentricity of the Moon’s orbit\n     * @returns {Unit}\n     */\n    static get e() {\n        return 0.0549;\n    }\n\n    /**\n     * Semi-major axis of Moon’s orbit\n     * @returns {Unit}\n     */\n    static get a() {\n        return math.unit(384401000, 'm');\n    }\n\n    /**\n     * @constructor\n     */\n    constructor() {\n        super();\n    }\n\n    position(time) {\n\n        //ToDo: calculate Moon's position.\n\n        let D = (Date.J2010 - 5.0) - time.toJD();\n\n        let l = (13.1763966 * D + Moon.l0) % 360,\n            Mm = (l - 0.1114041 * D - Moon.P0) % 360,\n            N = (Moon.N0 - 0.0529539 * D) % 360;\n\n\n    }\n\n}","class Orbit extends TwoLineElement {\n\n    /**\n     * Orbit implementation. Kepler problem solver.\n     *\n     * @param name\n     * @param line1\n     * @param line2\n     */\n    constructor(name, line1, line2) {\n        super(name, line1, line2);\n    }\n\n    static mu() {\n        return 3.986004418E14;\n    }\n\n    /**\n     * Length of Semi major axis in kilometers.\n     *\n     * @constructor\n     */\n    get a() {\n        let mu = 398600,\n            n  = (this.n * 2 * Math.PI / (24 * 3600)),\n            a3 = mu / Math.pow(n, 2),\n            a  = Math.cbrt(a3);\n\n        return a;\n    }\n\n    /**\n     * Semi minor axis\n     *\n     * @returns {number}\n     */\n    get b() {\n        let a = this.a,\n            e = this.e,\n            b = a * Math.sqrt((1 - Math.pow(e, 2)));\n\n        return b;\n    }\n\n    /**\n     * Distance from center to foci\n     *\n     * @returns {number}\n     */\n    get c() {\n        let a = this.a,\n            b = this.b,\n            c = Math.sqrt(Math.pow(a, 2) - Math.pow(b, 2));\n\n        return c;\n    }\n\n    /**\n     * Semi latus rectum ℓ\n     *\n     * @returns {number}\n     */\n    get ℓ() {\n        let a = this.a,\n            e = this.e,\n            l = a * (1 - Math.pow(e, 2));\n\n        return l;\n    }\n\n    /**\n     * Apoapsis radius\n     *\n     * @returns {number}\n     */\n    get Ra() {\n        let a  = this.a,\n            e  = this.e,\n            Ra = a * (1 + e);\n\n        return Ra;\n    }\n\n    /**\n     * Periapsis radius\n     *\n     * @returns {number}\n     */\n    get Rp() {\n        let a  = this.a,\n            e  = this.e,\n            Rp = a * (1 - e);\n\n        return Rp;\n    }\n\n    /**\n     * Velocity\n     *\n     * @param r\n     * @returns {number}\n     */\n    v(r) {\n        let mu = Earth.M.toNumeric('kg') * Astro.G,\n            a  = this.a,\n            v  = Math.sqrt(((2 * mu) / r) - (mu / a));\n\n        return v;\n    }\n\n    /**\n     * Flight path angle\n     *\n     * @returns {number}\n     */\n    γ() {\n        let e = this.e,\n            ν = this.ν,\n            γ = Math.atan((e * Math.sin(ν)) / (1 + (e * Math.cos(ν))));\n\n        return γ;\n    }\n\n    /**\n     * eccentricAnomaly - E\n     * Solve Kepler's equation\n     * @returns {number} Eccentric anomaly in degrees\n     */\n    get E() {\n        let precision    = 8,\n            m            = 2.0 * Math.PI * (this.M / 360.0 - Math.floor(this.M / 360.0)),\n            Δ            = Math.pow(10, -precision),\n            E            = this.e < 0.8 ? m : Math.PI,\n            F            = E - this.e * Math.sin(m) - m,\n            maxIteration = 30,\n            i            = 0;\n\n        while ((Math.abs(F) > Δ) && (i < maxIteration)) {\n            E = E - F / (1.0 - this.e * Math.cos(E));\n            F = E - this.e * Math.sin(E) - m;\n\n            i++;\n        }\n\n        return Math.round(E.toDegrees() * Math.pow(10, precision)) / Math.pow(10, precision);\n    }\n\n    /**\n     * trueAnomaly ν\n     *\n     * @returns {number} True anomaly in degrees\n     */\n    get ν() {\n        let precision = 8,\n            E         = this.E.toRadians(),\n            fak       = Math.sqrt(1.0 - Math.pow(this.e, 2)),\n            ν         = Math.atan2(fak * Math.sin(E), Math.cos(E) - this.e).toDegrees();\n\n        return Math.round(ν * Math.pow(10, precision)) / Math.pow(10, precision);\n\n    }\n\n    /**\n     * Recalculate Mean anomaly M, for given time if mean anomaly at epoch M0 is known.\n     *\n     * @param time\n     * @returns {*}\n     */\n    calcM(time) {\n        var date = moment(time);\n        var ΔT   = parseInt(moment.duration(date.diff(this.epoch)).asSeconds()) / this.T;\n\n        let M0 = this.M0,\n            n  = this.n,\n            M  = M0 + n * ΔT;\n\n        this.M = M;\n\n        return M;\n    }\n\n    // ToDo: time of periapsis passage\n\n    /**\n     * Area A1 = ab / 2 (E - e sin(E))\n     *\n     */\n    funct() {\n        let E  = this.E,\n            a  = this.a,\n            b  = this.b,\n            e  = this.e,\n            A1 = a * b / 2 * (E - e * Math.sin(E));\n\n    }\n\n}","class Sun extends Orbit {\n\n    /**\n     * @constructor\n     *\n     * http://nssdc.gsfc.nasa.gov/planetary/factsheet/sunfact.html\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * Ecliptic longitude at epoch 2010.0\n     *\n     * @returns {Unit}\n     */\n    static get εg0() {\n        return math.unit(279.557208, 'deg');\n    }\n\n    /**\n     * Ecliptic longitude of perigee at epoch 2010.0\n     *\n     * @returns {Unit}\n     */\n    static get ϖg0() {\n        return math.unit(283.112438, 'deg');\n    }\n\n    /**\n     * Eccentricity of orbit at epoch 2010.0\n     *\n     * @returns {Number}\n     */\n    static get e0() {\n        return 0.016705;\n    }\n\n    /**\n     * Semi major axis of Sun Earth orbit\n     *\n     * @type {Unit}\n     */\n    static get r0() {\n        return math.unit(1.495985e8, 'km');\n    }\n\n    /**\n     * Routine calculates position and distance of Sun. Distance is expressed in kilometers.\n     *\n     * @param {Date} time\n     */\n    position(time) {\n        // julian centuries since 1900 January 0.5\n        let JD = time.toJD(),\n\n            T  = (JD - Date.J1900) / 36525,\n\n            // ecliptic longitude (degrees)\n            εg = (279.6966778 + (36000.76892 * T) + (0.0003025 * Math.pow(T, 2)) % 360),\n\n            // ecliptic longitude of perigee (degrees)\n            ϖg = (281.2208444 + (1.719175 * T) + (0.000452778 * Math.pow(T, 2)) % 360),\n\n            // eccentricity of Sun - Earth orbit\n            e  = 0.01675104 - (0.0000418 * T) - (0.000000126 * Math.pow(T, 2)),\n\n            // mean anomaly\n            M  = εg - ϖg;\n\n        // calculate true anomaly\n        this.M = M;\n        this.e = e;\n        let ν  = this.ν,\n            f  = (1 + e * Math.cos(ν)) / (1 - Math.pow(e, 2)),\n\n            // distance\n            Δ  = Sun.r0.toNumeric('km') / f,\n\n            // geocentric ecliptic longitude\n            λ  = ν + ϖg,\n\n            // geocentric ecliptic latitude\n            β  = 0;\n\n        if (ν < 0) ν += 360;\n        if (λ > 360) λ -= 360;\n\n        return new Ecliptic(λ, β, Δ);\n    }\n\n    /**\n     * Routine calculates\n     */\n    times(time) {\n        let position = this.position(time).toEquatorial();\n\n    }\n\n}\n\n","/**\n * Implementation of satellite two line element set.\n *\n * @see https://www.mmto.org/obscats/tle.html\n */\nclass TwoLineElement {\n\n    /**\n     * @constructor\n     *\n     * @param name\n     * @param line1\n     * @param line2\n     */\n    constructor(name, line1, line2) {\n\n        if (typeof name != 'undefined' || typeof line1 != 'undefined' || typeof line2 != 'undefined') {\n            this.parse(name, line1, line2);\n        }\n\n    }\n\n    parse(name, line1, line2) {\n        this.bstar_mantissa = Number(line1.substring(53, 59)) * 1e-5;\n        this.bstar_exponent = Number(\"1e\" + Number(line1.substring(59, 61)));\n        this.bstar = this.bstar_mantissa * this.bstar_exponent;\n\n        this.lineNum1 = Number(line1.slice(0, 0));\n        this.designator1 = Number(line1.slice(2, 6));\n        this.classification = Number(line1.slice(7, 7));\n        this.identification = Number(line1.slice(9, 17));\n        this.day = Number(line1.substring(20, 32));\n        this.year = Number(line1.slice(18, 20));\n\n        // first derivative of mean motion\n        this.Δ1n = Number(line1.substring(33, 43));\n\n        // second derivative of mean motion\n        this.Δ2n = Number(line1.substring(44, 52));\n\n        this.ephemeris_type = Number(line1.substring(62, 63));\n        this.element_number = Number(line1.substring(64, 68));\n        this.checkSum1 = Number(line1.substring(69, 69));\n        this.lineNum2 = Number(line1.slice(0, 0));\n        this.designator2 = Number(line2.slice(2, 7));\n\n        this.designator = Number(line2.slice(2, 7));\n\n        // inclination\n        this.i = Number(line2.substring(8, 16));\n\n        // right ascension\n        this.Ω = Number(line2.substring(17, 25));\n\n        // eccentricity\n        this.e = Number('.000' + Number(line2.substring(26, 33)));\n\n        // argument of periapsis\n        this.ω = Number(line2.substring(34, 42));\n\n        // mean anomaly at epoch\n        this.M0 = Number(line2.substring(43, 51));\n\n        // mean motion\n        this.n = Number(line2.substring(52, 63));\n\n        // revolution number at epoch\n        this.N = Number(line2.substring(64, 68));\n\n        // second line checksum\n        let checkSum2 = Number(line1.substring(68, 69));\n\n        // orbital period in seconds\n        this.T = 86400 / this.n;\n\n        this.year = (this.year < 57) ? this.year + 2000 : this.year + 1900;\n\n        // epoch date\n        this.epoch = moment(TwoLineElement.epoch2Date(this.year, this.day));\n    }\n\n    /**\n     * Converts TLE year, day fraction to Date object.\n     *\n     * @param year\n     * @param fraction\n     * @returns {Date}\n     */\n    static epoch2Date(year, fraction) {\n        year -= 1;\n        let milliseconds = parseInt(Date.UTC(year, 11, 31, 0, 0, 0) + (fraction * 24 * 60 * 60 * 1000));\n\n        return new Date(milliseconds);\n    }\n\n    toString() {\n        //ToDo: implement in reverse\n    }\n\n}","/**\n * Implementation of The World Geodetic System (WGS84)\n *\n * @see https://confluence.qps.nl/pages/viewpage.action?pageId=29855173\n */\nclass WGS84 {\n\n    /**\n     * Semi-major Axis expressed in meters [m]\n     *\n     * @returns {number}\n     */\n    static get a() {\n        return math.unit(6378137.0, 'm');\n    }\n\n    /**\n     * Flattening Factor of the Earth\n     *\n     * @returns {number}\n     */\n    static get f() {\n        return 1 / 298.257223563;\n    }\n\n    /**\n     * Nominal Mean Angular Velocity expressed in radians per second [rad/s]\n     *\n     * @returns {number}\n     */\n    static get ω() {\n        return math.unit(7292115e-11, 'rad/s');\n    }\n\n    /**\n     * Geocentric Gravitational Constant GM or μ expressed in cube meters per square seconds [m^3/s^2]\n     *\n     * @returns {number}\n     */\n    static get μ() {\n        return math.unit(3986004.418E8, 'm^3/s^2');\n    }\n\n}"],"sourceRoot":"/source/"}